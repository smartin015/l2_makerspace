# Generate typescript from particular flavors of ros message
import l2_msgs.msg as l2_msgs
import re

ATTR_MAP = {
  "string": "string",
  "int32": "number",
  "float32": "number",
}

SCHEMA_FMT = """
-- THIS SCHEMA IS AUTOGENERATED
-- See gen_schema.py in l2_storage ros node
BEGIN;
{tables}

COMMIT;
"""

TABLE_FMT = """
CREATE TABLE IF NOT EXISTS {name} (
{cols}
);"""

COL_FMT = "  {name} {typ} {suffix}"

TYPE_SEP = ":"
TYPE_REL = ">"

def to_pg_type(msg_type):
    return {
        "boolean": "BOOLEAN",
        "int32": "INTEGER",
        "int64": "BIGINT",
        "string": "TEXT",
        "sequence<octet>": "BYTEA",
    }.get(msg_type.strip(), "UNKNOWN")

def l2_type(pgtype):
    # Turns e.g. sequence<l2_msgs/L2Role> -> L2Role
    m = re.search(r"l2\_\w+\/(\w+)", pgtype)
    return m if m is None else m.group(1)

def to_table(msg, tables):
    name = msg().__class__.__name__
    pgcols = [] if msg.PG_COLS == "all" else [c.strip() for c in msg.PG_COLS.split(' ')]
    exclude = [a[1:] for a in pgcols if a.startswith('-')]
    ft = {k:v for k,v in msg.get_fields_and_field_types().items() if k not in exclude}
    over = dict([a.split(TYPE_SEP, 1) for a in pgcols if TYPE_SEP in a])

    relations = dict([(k, l2_type(v)) for k,v in ft.items() if
            'l2' in v and l2_type(v) in tables])
    relations = {**relations,  **dict([i.split(TYPE_REL, 1) for i in pgcols if TYPE_REL in
        i])}

    merged = {**ft, **over}
    print("%s: orig %s, excluding %s, merging %s -> %s, relation %s" % (name, str(ft),
        str(exclude), str(over), str(merged), str(relations)))
    cols = []
    for n,t in merged.items():
        suffix = "REFERENCES %s(id)" % (relations[n]) if n in relations.keys() else ""
        cols.append(COL_FMT.format(name=n, typ=to_pg_type(t),
            suffix=suffix).rstrip())
    return TABLE_FMT.format(name=name,
                            cols=",\n".join(cols))

def gen_schema():
    table_msgs = []
    for msg in dir(l2_msgs):
        if msg.startswith("_"):
            continue
        msg = getattr(l2_msgs, msg)
        if not hasattr(msg, 'PG_COLS'):
            continue
        table_msgs.append(msg)
    
    table_strings = [m().__class__.__name__ for m in table_msgs]
    return SCHEMA_FMT.format(tables="\n\n".join([to_table(m, table_strings) for
        m in table_msgs]))

if __name__ == "__main__":
    print(gen_schema())


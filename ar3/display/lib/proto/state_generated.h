// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STATE_H_
#define FLATBUFFERS_GENERATED_STATE_H_

#include "flatbuffers/flatbuffers.h"

struct State;
struct StateT;

struct StateT : public flatbuffers::NativeTable {
  typedef State TableType;
  std::vector<uint16_t> pos;
  std::vector<uint16_t> target;
  std::string herp;
  StateT() {
  }
};

struct State FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef StateT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_TARGET = 6,
    VT_HERP = 8
  };
  const flatbuffers::Vector<uint16_t> *pos() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_POS);
  }
  const flatbuffers::Vector<uint16_t> *target() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_TARGET);
  }
  const flatbuffers::String *herp() const {
    return GetPointer<const flatbuffers::String *>(VT_HERP);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyVector(pos()) &&
           VerifyOffset(verifier, VT_TARGET) &&
           verifier.VerifyVector(target()) &&
           VerifyOffset(verifier, VT_HERP) &&
           verifier.VerifyString(herp()) &&
           verifier.EndTable();
  }
  StateT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(StateT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<State> Pack(flatbuffers::FlatBufferBuilder &_fbb, const StateT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct StateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> pos) {
    fbb_.AddOffset(State::VT_POS, pos);
  }
  void add_target(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> target) {
    fbb_.AddOffset(State::VT_TARGET, target);
  }
  void add_herp(flatbuffers::Offset<flatbuffers::String> herp) {
    fbb_.AddOffset(State::VT_HERP, herp);
  }
  explicit StateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StateBuilder &operator=(const StateBuilder &);
  flatbuffers::Offset<State> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<State>(end);
    return o;
  }
};

inline flatbuffers::Offset<State> CreateState(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> pos = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> target = 0,
    flatbuffers::Offset<flatbuffers::String> herp = 0) {
  StateBuilder builder_(_fbb);
  builder_.add_herp(herp);
  builder_.add_target(target);
  builder_.add_pos(pos);
  return builder_.Finish();
}

inline flatbuffers::Offset<State> CreateStateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint16_t> *pos = nullptr,
    const std::vector<uint16_t> *target = nullptr,
    const char *herp = nullptr) {
  auto pos__ = pos ? _fbb.CreateVector<uint16_t>(*pos) : 0;
  auto target__ = target ? _fbb.CreateVector<uint16_t>(*target) : 0;
  auto herp__ = herp ? _fbb.CreateString(herp) : 0;
  return CreateState(
      _fbb,
      pos__,
      target__,
      herp__);
}

flatbuffers::Offset<State> CreateState(flatbuffers::FlatBufferBuilder &_fbb, const StateT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline StateT *State::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new StateT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void State::UnPackTo(StateT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = pos(); if (_e) { _o->pos.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->pos[_i] = _e->Get(_i); } } };
  { auto _e = target(); if (_e) { _o->target.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->target[_i] = _e->Get(_i); } } };
  { auto _e = herp(); if (_e) _o->herp = _e->str(); };
}

inline flatbuffers::Offset<State> State::Pack(flatbuffers::FlatBufferBuilder &_fbb, const StateT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateState(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<State> CreateState(flatbuffers::FlatBufferBuilder &_fbb, const StateT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const StateT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _pos = _o->pos.size() ? _fbb.CreateVector(_o->pos) : 0;
  auto _target = _o->target.size() ? _fbb.CreateVector(_o->target) : 0;
  auto _herp = _o->herp.empty() ? 0 : _fbb.CreateString(_o->herp);
  return CreateState(
      _fbb,
      _pos,
      _target,
      _herp);
}

inline const State *GetState(const void *buf) {
  return flatbuffers::GetRoot<State>(buf);
}

inline const State *GetSizePrefixedState(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<State>(buf);
}

inline bool VerifyStateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<State>(nullptr);
}

inline bool VerifySizePrefixedStateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<State>(nullptr);
}

inline void FinishStateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<State> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedStateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<State> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<StateT> UnPackState(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<StateT>(GetState(buf)->UnPack(res));
}

#endif  // FLATBUFFERS_GENERATED_STATE_H_

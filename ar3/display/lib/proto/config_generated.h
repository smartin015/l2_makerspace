// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONFIG_H_
#define FLATBUFFERS_GENERATED_CONFIG_H_

#include "flatbuffers/flatbuffers.h"

struct Config;
struct ConfigT;

struct ConfigT : public flatbuffers::NativeTable {
  typedef Config TableType;
  std::string ssid;
  std::string pass;
  std::string ws_ip;
  int32_t ws_port;
  ConfigT()
      : ws_port(0) {
  }
};

struct Config FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ConfigT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SSID = 4,
    VT_PASS = 6,
    VT_WS_IP = 8,
    VT_WS_PORT = 10
  };
  const flatbuffers::String *ssid() const {
    return GetPointer<const flatbuffers::String *>(VT_SSID);
  }
  const flatbuffers::String *pass() const {
    return GetPointer<const flatbuffers::String *>(VT_PASS);
  }
  const flatbuffers::String *ws_ip() const {
    return GetPointer<const flatbuffers::String *>(VT_WS_IP);
  }
  int32_t ws_port() const {
    return GetField<int32_t>(VT_WS_PORT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SSID) &&
           verifier.VerifyString(ssid()) &&
           VerifyOffset(verifier, VT_PASS) &&
           verifier.VerifyString(pass()) &&
           VerifyOffset(verifier, VT_WS_IP) &&
           verifier.VerifyString(ws_ip()) &&
           VerifyField<int32_t>(verifier, VT_WS_PORT) &&
           verifier.EndTable();
  }
  ConfigT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ConfigT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Config> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ssid(flatbuffers::Offset<flatbuffers::String> ssid) {
    fbb_.AddOffset(Config::VT_SSID, ssid);
  }
  void add_pass(flatbuffers::Offset<flatbuffers::String> pass) {
    fbb_.AddOffset(Config::VT_PASS, pass);
  }
  void add_ws_ip(flatbuffers::Offset<flatbuffers::String> ws_ip) {
    fbb_.AddOffset(Config::VT_WS_IP, ws_ip);
  }
  void add_ws_port(int32_t ws_port) {
    fbb_.AddElement<int32_t>(Config::VT_WS_PORT, ws_port, 0);
  }
  explicit ConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ConfigBuilder &operator=(const ConfigBuilder &);
  flatbuffers::Offset<Config> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Config>(end);
    return o;
  }
};

inline flatbuffers::Offset<Config> CreateConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> ssid = 0,
    flatbuffers::Offset<flatbuffers::String> pass = 0,
    flatbuffers::Offset<flatbuffers::String> ws_ip = 0,
    int32_t ws_port = 0) {
  ConfigBuilder builder_(_fbb);
  builder_.add_ws_port(ws_port);
  builder_.add_ws_ip(ws_ip);
  builder_.add_pass(pass);
  builder_.add_ssid(ssid);
  return builder_.Finish();
}

inline flatbuffers::Offset<Config> CreateConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *ssid = nullptr,
    const char *pass = nullptr,
    const char *ws_ip = nullptr,
    int32_t ws_port = 0) {
  auto ssid__ = ssid ? _fbb.CreateString(ssid) : 0;
  auto pass__ = pass ? _fbb.CreateString(pass) : 0;
  auto ws_ip__ = ws_ip ? _fbb.CreateString(ws_ip) : 0;
  return CreateConfig(
      _fbb,
      ssid__,
      pass__,
      ws_ip__,
      ws_port);
}

flatbuffers::Offset<Config> CreateConfig(flatbuffers::FlatBufferBuilder &_fbb, const ConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ConfigT *Config::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new ConfigT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Config::UnPackTo(ConfigT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = ssid(); if (_e) _o->ssid = _e->str(); };
  { auto _e = pass(); if (_e) _o->pass = _e->str(); };
  { auto _e = ws_ip(); if (_e) _o->ws_ip = _e->str(); };
  { auto _e = ws_port(); _o->ws_port = _e; };
}

inline flatbuffers::Offset<Config> Config::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateConfig(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Config> CreateConfig(flatbuffers::FlatBufferBuilder &_fbb, const ConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ConfigT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _ssid = _o->ssid.empty() ? 0 : _fbb.CreateString(_o->ssid);
  auto _pass = _o->pass.empty() ? 0 : _fbb.CreateString(_o->pass);
  auto _ws_ip = _o->ws_ip.empty() ? 0 : _fbb.CreateString(_o->ws_ip);
  auto _ws_port = _o->ws_port;
  return CreateConfig(
      _fbb,
      _ssid,
      _pass,
      _ws_ip,
      _ws_port);
}

inline const Config *GetConfig(const void *buf) {
  return flatbuffers::GetRoot<Config>(buf);
}

inline const Config *GetSizePrefixedConfig(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Config>(buf);
}

inline bool VerifyConfigBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Config>(nullptr);
}

inline bool VerifySizePrefixedConfigBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Config>(nullptr);
}

inline void FinishConfigBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Config> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedConfigBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Config> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<ConfigT> UnPackConfig(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ConfigT>(GetConfig(buf)->UnPack(res));
}

#endif  // FLATBUFFERS_GENERATED_CONFIG_H_
